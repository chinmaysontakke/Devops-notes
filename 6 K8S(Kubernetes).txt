K8S:

IT is an open-source container orchestration platform.
It is used to automates many of the manual processes like deploying, managing, and scaling containerized applications.
Kubernetes was developed by GOOGLE using GO Language.
Google donated K8's to CNCF in 2014.
1st version was released in 2015.

ARCHITECTURE:

DOCKER : CNCA
K8S: CNPCA

C : CLUSTER
N : NODE
P : POD
C : CONTAINER
A : APPLICATION


COMPONENTS:
MASTER:

1. API SERVER: communicate with user (takes command execute & give op)
2. ETCD: database of cluster (stores complete info of a cluster)
3. SCHEDULER: schedules pods on worker node (depends on hw of node)
4. CONTROLLER: control the k8s objects (n/w, service, volume)

WORKER:

1. KUBELET : its an agent (it will inform all activites to master)
2. KUBEPROXY: it deals with nlw (ip, networks, ports)
3. POD : group of conatiners (inside pod we have app)


CLUSTER:
1. SELF MANAGED: WE NEED TO CREATE & MANAGE THEM

minikube = single node cluster
kubeadm = multi node cluster (manual)
kops = multi node cluster (automation)

2. CLOUD BASED: CLOUD PROVIDERS WILL MANAGE THEM

AWS = EKS = ELASTIC KUBERNETES SERVICE
AZURE = AKS = AZURE KUBERENETS SERVICE
GOOGLE = GKS = GOOGLE KUBERENETS SERVICE



MINIKUBE:
It is a tool used to setup single node cluster on K8's. 
It contains API Servers, ETDC database and container runtime
It is used for development, testing, and experimentation purposes on local. 
Here Master and worker runs on same machine
It is a platform Independent.
Installing Minikube is simple compared to other tools.

NOTE: But we dont implement this in real-time Prod

REQUIREMENTS:

2 CPUs or more
2GB of free memory
20GB of free disk space
Internet connection
Container or virtual machine manager, such as: Docker.

Kubectl is the command line tool for k8s
if we want to execute commands we need to use kubectl.

SETUP:
sudo apt update -y
sudo apt upgrade -y
sudo apt install curl wget apt-transport-https -y
sudo curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
sudo curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
sudo mv minikube-linux-amd64 /usr/local/bin/minikube
sudo chmod +x /usr/local/bin/minikube
sudo minikube version
sudo curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
sudo curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
sudo echo "$(cat kubectl.sha256) kubectl" | sha256sum --check
sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
sudo minikube start --driver=docker --force

POD:
It is a smallest unit of deployment in K8's.
It is a group of containers.
Pods are ephemeral (short living objects)
Mostly we can use single container inside a pod but if we required, we can create multiple containers inside a same pod.
when we create a pod, containers inside pods can share the same network namespace, and can share the same storage volumes .
While creating pod, we must specify the image, along with any necessary configuration and resource limits.
K8's cannot communicate with containers, they can communicate with only pods.
 We can create this pod in two ways, 

1. Imperative(command) 
2. Declarative (Manifest file)


1) IMPERATIVE:-

kubectl run pod1 --image vinodvanama/paytmmovies:latest  : to create pod
kubectl get pod                                          : to view/list pod
kubectl get pod -o wide                                  : to get detailed info of pod 
kubectl describe pod pod1                                : to get specfic pod info
kubectl delete pod pod2                                  : to delete pod

2) DECRALATIVE:-

vim pod.yml

apiVersion: v1
kind: Pod
metadata:
  name: pod1
spec:
  containers:
    - image: vinodvanama/paytmtrain:latest
      name: cont1

kubectl apply -f pod.yml ( to run manifest files) 


HISTORY:
 1  vim minikube.sh
    2  sh minikube.sh
    3  minikube status
    4  kubectl run pod1 --image vinodvanama/paytmmovies:latest
    5  kubectl get pod
    6  kubectl run pod2 --image vinodvanama/paytmtrain:latest
    7  kubectl get pod
    8  kubectl grt pod -o wide
    9  kubectl get pod -o wide
   10  kubectl describe pod pod1
   11  kubectl delete pod pod2
   12  kubectl get pod
   13  kubectl delete pod pod1
   14  vim pod.yml
   15  kubectl create -f pod.yml
   16  kubectl get pod
   17  kubectl describe pod pod1
   18  cat pod.yml
   19  history
============================================================================================================================
Day 02
Note :- In declarative method we are not able to recover pods once they are deleted. So to overcome it we
        use ReplicaSet(rs).
REPLICASET:
it will create multiple copies of same pod.
if we delete one pod automatically it will create new pod.


LABELS: is used to craete the particular pods as a single unit.
SELECTOR: Used to select pods with same labels.


vim replicaset.yml

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  labels:
    app: swiggy
  name: swiggy-rs
spec:
  replicas: 3
  selector:
    matchLabels:
      app: swiggy
  template:
    metadata:
      labels:
        app: swiggy
    spec:
      containers:
      - name: cont1
        image: nginx


To list rs		:kubectl get rs/replicaset
To show addtional info	:kubectl get rs -o wide
To show complete info	:kubectl describe rs name-of-rs
To delete the rs	:kubectl delete rs name-of-rs
to get lables of pods 	: kubectl get pods -l app=swiggy
TO scale rs		: kubectl scale rs/swiggy-rs --replicas=10 (LIFO)
to get/check API version : kubectl api-resources

DRAWBACKS:
1. we cant rollin and rollout, we cant update the application in rs(replicaset).

DEPLOYMENT:
deploy -- > rs -- > pods              : flow od deployment
we can update the application.
its high level k8s objects.

vim deploy.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: swiggy
  name: swiggy-rs
spec:
  replicas: 3
  selector:
    matchLabels:
      app: swiggy
  template:
    metadata:
      labels:
        app: swiggy
    spec:
      containers:
      - name: cont1
        image: nginx


To list deployment	:kubectl get deploy
To show addtional info	:kubectl get deploy -o wide
To show complete info	:kubectl describe deploy name-of-deployment
To delete the deploy	:kubectl delete deploy name-of-deploy
to get lables of pods 	:kubectl get pods -l app=swiggy
TO scale deploy		:kubectl scale deploy/name-of-deploy --replicas=10 (LIFO)
To edit deploy		:kubectl edit deploy/name-of-deploy
to show all pod labels	:kubectl get pods --show-labels
To delete all pods	:kubectl delete pod --all



HISTORY:
 1  vim minikube.sh
    2  sh minikube.sh
    3  vim rs.yml
    4  kubectl get pods
    5  kubectl create -f rs.yml
    6  kubectl get pods
    7  kubectl get pods --show labels
    8  kubectl get pods -l swiggy
    9  kubectl get pods -l=swiggy
   10  kubectl get pods
   11  kubectl describe pod swiggy-rs-h4f6x
   12  kubectl get pods -l app=swiggy
   13  kubectl delete pod swiggy-rs-h4f6x
   14  kubectl get pods
   15  kubectl delete pod swiggy-rs-9ks7n
   16  kubectl get pods
   17  kubectl get replicaset
   18  kubectl get rs
   19  kubectl get rs -o wide
   20  kubectl describe rs swiggy-rs
   21  kubectl delete rs swiggy-rs
   22  kubectl get po
   23  cat rs.yml
   24  kubectl api-resource
   25  kubectl api-resources
   26  cat rs.yml
   27  kubectl create -f rs.yml
   28  kubectl get rs
   29  kubectl get rs -o wide
   30  kubectl describe rs swiggy-rs
   31  kubectl delete rs swiggy-rs
   32  kubectl get rs
   33  kubectl get po
   34  kubectl create -f rs.yml
   35  kubectl get rs
   36  kubectl get po
   37  kubectl scale rs/swiggy-rs --scale=10
   38  kubectl scale rs/swiggy-rs --replicas=10
   39  kubectl get po
   40  kubectl scale rs/swiggy-rs --replicas=5
   41  kubectl get po
   42  kubectl delete rs swiggy-rs
   43  vim rs.yml
   44  kubectl apply -f rs.yml
   45  kubectl get deploy
   46  kubectl get rs
   47  kubectl get pods
   48  kubectl describe deploy swiggy-rs
   49  kubectl get pods
   50  kubectl describe pod swiggy-rs-6d6f49d7cd-rqf84
   51  kubectl describe pod swiggy-rs-6d6f49d7cd-ts6jq
   52  kubectl edit deploy/swiggy-rs
   53  kubectl describe deploy swiggy-rs
   54  kubectl get po
   55  kubectl delete pod swiggy-rs-64956f47f-9q6mn
   56  kubectl describe pod swiggy-rs-64956f47f-c46ss
   57  kubectl describe pod swiggy-rs-64956f47f-g9cf8
   58  kubectl edit deploy/swiggy-rs
   59  kubectl get rs
   60  kubectl describe deploy
   61  kubectl get po
   62  kubectl scale deploy/swiggy-rs --replicas=20
   63  kubectl get po
   64  kubectl scale deploy/swiggy-rs --replicas=3
   65  kubectl get po
   66  kubectl run pod1 --image vinodvanama/paytmmovies:latest
   67  kubectl run pod2 --image vinodvanama/paytmmovies:latest
   68  kubectl run pod3 --image vinodvanama/paytmmovies:latest
   69  kubectl get po
   70  kubectl get po -l app=swiggy
   71  kubectl get po --help
   72  kubectl get po
   73  kubectl get po -o wide
   74  kubectl get po -o wide --show --help
   75  kubectl get po --show --help
   76  kubectl get po --show -h
   77  kubectl get po --labels
   78  kubectl get po -l --help
   79  kubectl get rs -o wide
   80  kubectl get pods --show-labels
   81  kubectl delete pod -A
   82  kubectl delete pod -A default
   83  kubectl delete pod --all default
   84  kubectl delete pod --all
   85  history
